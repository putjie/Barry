
git rebase 之前检查分支是否最新
git fetch origin && git rebase origin/master

删除已经add的文件
git rm --cached "文件路径"，不删除物理文件，仅将该文件从缓存中删除；

删除本地分支
git branch -D/-d 分支名称
删除远程分支
git push origin --delete remote_branch

同步远程分支(分支已删除，目录也会删除)
git remote prune origin

git修改分支名称
git branch -m oldb newb

切换分支
git checkout 分支名称

切换远程分支到本地
git checkout -b name origin/远程分支名称

把当前改动的内容缓存起来
git stash
把之前缓存的内容pop出来
git stash pop
查看缓存列表
git stash list

合并分支
git rebase -i 分支id

rebase后推远程分支
git push -f origin/分支名称

merge
git pull -- 拉取所有分支到本地(如果有权限)
git merge 分支名称 -- 合并其他分支到当前分支


合并冲突
删除或修改冲突内容后 执行git add -u(添加修改的内容) 

版本说明
package.json的 ^~
指定版本：比如1.2.2，遵循“大版本.次要版本.小版本”的格式规定，安装时只安装指定版本。
波浪号（tilde）+指定版本：比如~1.2.2，表示安装1.2.x的最新版本（不低于1.2.2），但是不安装1.3.x，也就是说安装时不改变大版本号和次要版本号。
插入号（caret）+指定版本：比如ˆ1.2.2，表示安装1.x.x的最新版本（不低于1.2.2），但是不安装2.x.x，也就是说安装时不改变大版本号。
    需要注意的是，如果大版本号为0，则插入号的行为与波浪号相同，这是因为此时处于开发阶段，即使是次要版本号变动，也可能带来程序的不兼容。
latest：安装最新版本。


git 配置文件
core.symlinks=false
core.autocrlf=true
color.diff=auto
color.status=auto
color.branch=auto
color.interactive=true
pack.packsizelimit=2g
help.format=html
http.sslcainfo=C:/Program Files/Git/mingw64/ssl/certs/ca-bundle.crt
diff.astextplain.textconv=astextplain
rebase.autosquash=true
gui.recentrepo=D:/WWW/yele
user.email=haihua.liang@360gst.com
user.name=梁海华
color.status=auto
color.branch=auto
core.autocrlf=true
core.whitespace=cr-at-eol
alias.lg=log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
alias.lgp=log --graph --decorate --pretty=oneline --abbrev-commit --all
core.repositoryformatversion=0
core.filemode=false
core.bare=false
core.logallrefupdates=true
core.symlinks=false
core.ignorecase=true
core.hidedotfiles=dotGitOnly
remote.origin.url=git@github.com:putjie/Barry.git
remote.origin.fetch=+refs/heads/*:refs/remotes/origin/*
branch.master.remote=origin
branch.master.merge=refs/heads/master
